/*
 Generated by typeshare 1.5.0
 */

import Foundation

public enum DimensionWidthValue: Codable {
	case fixed(Float)
	case percentage(Float)
	case fit(DimensionWidthFitValue)

	enum CodingKeys: String, CodingKey, Codable {
		case fixed,
			percentage,
			fit
	}

	private enum ContainerCodingKeys: String, CodingKey {
		case type, value
	}

	public init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: ContainerCodingKeys.self)
		if let type = try? container.decode(CodingKeys.self, forKey: .type) {
			switch type {
			case .fixed:
				if let content = try? container.decode(Float.self, forKey: .value) {
					self = .fixed(content)
					return
				}
			case .percentage:
				if let content = try? container.decode(Float.self, forKey: .value) {
					self = .percentage(content)
					return
				}
			case .fit:
				if let content = try? container.decode(DimensionWidthFitValue.self, forKey: .value) {
					self = .fit(content)
					return
				}
			}
		}
		throw DecodingError.typeMismatch(DimensionWidthValue.self, DecodingError.Context(codingPath: decoder.codingPath, debugDescription: "Wrong type for DimensionWidthValue"))
	}

	public func encode(to encoder: Encoder) throws {
		var container = encoder.container(keyedBy: ContainerCodingKeys.self)
		switch self {
		case .fixed(let content):
			try container.encode(CodingKeys.fixed, forKey: .type)
			try container.encode(content, forKey: .value)
		case .percentage(let content):
			try container.encode(CodingKeys.percentage, forKey: .type)
			try container.encode(content, forKey: .value)
		case .fit(let content):
			try container.encode(CodingKeys.fit, forKey: .type)
			try container.encode(content, forKey: .value)
		}
	}
}

public enum DimensionHeightValue: Codable {
	case fixed(Float)
	case percentage(Float)
	case fit(DimensionHeightFitValue)

	enum CodingKeys: String, CodingKey, Codable {
		case fixed,
			percentage,
			fit
	}

	private enum ContainerCodingKeys: String, CodingKey {
		case type, value
	}

	public init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: ContainerCodingKeys.self)
		if let type = try? container.decode(CodingKeys.self, forKey: .type) {
			switch type {
			case .fixed:
				if let content = try? container.decode(Float.self, forKey: .value) {
					self = .fixed(content)
					return
				}
			case .percentage:
				if let content = try? container.decode(Float.self, forKey: .value) {
					self = .percentage(content)
					return
				}
			case .fit:
				if let content = try? container.decode(DimensionHeightFitValue.self, forKey: .value) {
					self = .fit(content)
					return
				}
			}
		}
		throw DecodingError.typeMismatch(DimensionHeightValue.self, DecodingError.Context(codingPath: decoder.codingPath, debugDescription: "Wrong type for DimensionHeightValue"))
	}

	public func encode(to encoder: Encoder) throws {
		var container = encoder.container(keyedBy: ContainerCodingKeys.self)
		switch self {
		case .fixed(let content):
			try container.encode(CodingKeys.fixed, forKey: .type)
			try container.encode(content, forKey: .value)
		case .percentage(let content):
			try container.encode(CodingKeys.percentage, forKey: .type)
			try container.encode(content, forKey: .value)
		case .fit(let content):
			try container.encode(CodingKeys.fit, forKey: .type)
			try container.encode(content, forKey: .value)
		}
	}
}

public struct DimensionStylingProperties: Codable {
	public let minWidth: Float?
	public let maxWidth: Float?
	public let width: DimensionWidthValue?
	public let minHeight: Float?
	public let maxHeight: Float?
	public let height: DimensionHeightValue?

	public init(minWidth: Float?, maxWidth: Float?, width: DimensionWidthValue?, minHeight: Float?, maxHeight: Float?, height: DimensionHeightValue?) {
		self.minWidth = minWidth
		self.maxWidth = maxWidth
		self.width = width
		self.minHeight = minHeight
		self.maxHeight = maxHeight
		self.height = height
	}
}

public enum FlexChildFlexPosition: String, Codable {
	case center
	case flexStart = "flex-start"
	case flexEnd = "flex-end"
	case stretch
}

public struct FlexChildStylingProperties: Codable {
	public let weight: Float?
	public let order: Int32?
	public let alignSelf: FlexChildFlexPosition

	public init(weight: Float?, order: Int32?, alignSelf: FlexChildFlexPosition) {
		self.weight = weight
		self.order = order
		self.alignSelf = alignSelf
	}
}

public struct SpacingStylingProperties: Codable {
	public let padding: String?
	public let margin: String?
	public let offset: String?

	public init(padding: String?, margin: String?, offset: String?) {
		self.padding = padding
		self.margin = margin
		self.offset = offset
	}
}

public struct ThemeColor: Codable {
	public let light: String
	public let dark: String?

	public init(light: String, dark: String?) {
		self.light = light
		self.dark = dark
	}
}

public struct ThemeUrl: Codable {
	public let light: String
	public let dark: String?

	public init(light: String, dark: String?) {
		self.light = light
		self.dark = dark
	}
}

public enum BackgroundImagePosition: String, Codable {
	case top
	case right
	case bottom
	case left
	case center
	case topRight = "top-right"
	case topLeft = "top-left"
	case bottomLeft = "bottom-left"
	case bottomRight = "bottom-right"
}

public enum BackgroundImageScale: String, Codable {
	case crop
	case fit
	case fill
}

public struct BackgroundImage: Codable {
	public let url: ThemeUrl
	public let position: BackgroundImagePosition?
	public let scale: BackgroundImageScale?

	public init(url: ThemeUrl, position: BackgroundImagePosition?, scale: BackgroundImageScale?) {
		self.url = url
		self.position = position
		self.scale = scale
	}
}

public struct BackgroundStylingProperties: Codable {
	public let backgroundColor: ThemeColor?
	public let backgroundImage: BackgroundImage?

	public init(backgroundColor: ThemeColor?, backgroundImage: BackgroundImage?) {
		self.backgroundColor = backgroundColor
		self.backgroundImage = backgroundImage
	}
}

public enum FontWeight: String, Codable {
	case w100 = "100"
	case w200 = "200"
	case w300 = "300"
	case w400 = "400"
	case w500 = "500"
	case w600 = "600"
	case w700 = "700"
	case w800 = "800"
	case w900 = "900"
}

public enum FontJustification: String, Codable {
	case left
	case right
	case center
	case start
	case end
	case justify
}

public enum FontBaselineAlignment: String, Codable {
	case `super`
	case sub
	case baseline
}

public enum FontStyle: String, Codable {
	case normal
	case italic
}

public enum TextTransform: String, Codable {
	case capitalize
	case uppercase
	case lowercase
	case none
}

public enum TextDecoration: String, Codable {
	case underline
	case strikeThrough = "strike-through"
}

public struct TextStylingProperties: Codable {
	public let textColor: ThemeColor?
	public let fontSize: Float?
	public let fontFamily: String?
	public let fontWeight: FontWeight?
	public let lineHeight: Float?
	public let horizontalTextAlign: FontJustification?
	public let baselineTextAlign: FontBaselineAlignment?
	public let fontStyle: FontStyle?
	public let textTransform: TextTransform?
	public let letterSpacing: Float?
	public let textDecoration: TextDecoration?
	public let lineLimit: Int32?

	public init(textColor: ThemeColor?, fontSize: Float?, fontFamily: String?, fontWeight: FontWeight?, lineHeight: Float?, horizontalTextAlign: FontJustification?, baselineTextAlign: FontBaselineAlignment?, fontStyle: FontStyle?, textTransform: TextTransform?, letterSpacing: Float?, textDecoration: TextDecoration?, lineLimit: Int32?) {
		self.textColor = textColor
		self.fontSize = fontSize
		self.fontFamily = fontFamily
		self.fontWeight = fontWeight
		self.lineHeight = lineHeight
		self.horizontalTextAlign = horizontalTextAlign
		self.baselineTextAlign = baselineTextAlign
		self.fontStyle = fontStyle
		self.textTransform = textTransform
		self.letterSpacing = letterSpacing
		self.textDecoration = textDecoration
		self.lineLimit = lineLimit
	}
}

public struct BasicTextStyle: Codable {
	public let dimension: DimensionStylingProperties?
	public let flexChild: FlexChildStylingProperties?
	public let spacing: SpacingStylingProperties?
	public let background: BackgroundStylingProperties?
	public let text: TextStylingProperties?

	public init(dimension: DimensionStylingProperties?, flexChild: FlexChildStylingProperties?, spacing: SpacingStylingProperties?, background: BackgroundStylingProperties?, text: TextStylingProperties?) {
		self.dimension = dimension
		self.flexChild = flexChild
		self.spacing = spacing
		self.background = background
		self.text = text
	}
}

public struct BasicStateStylingBlock<T: Codable>: Codable {
	public let `default`: T
	public let pressed: T?
	public let hovered: T?
	public let disabled: T?

	public init(default: T, pressed: T?, hovered: T?, disabled: T?) {
		self.default = `default`
		self.pressed = pressed
		self.hovered = hovered
		self.disabled = disabled
	}
}

public struct BasicTextElements: Codable {
	public let own: [BasicStateStylingBlock<BasicTextStyle>]

	public init(own: [BasicStateStylingBlock<BasicTextStyle>]) {
		self.own = own
	}
}

public struct LayoutStyle<T: Codable>: Codable {
	public let elements: T

	public init(elements: T) {
		self.elements = elements
	}
}

public struct BasicTextModel: Codable {
	public let styles: LayoutStyle<BasicTextElements>?
	public let value: String

	public init(styles: LayoutStyle<BasicTextElements>?, value: String) {
		self.styles = styles
		self.value = value
	}
}

public enum FlexPosition: String, Codable {
	case center
	case flexStart = "flex-start"
	case flexEnd = "flex-end"
}

public struct ContainerStylingProperties: Codable {
	public let justifyContent: FlexPosition?
	public let alignItems: FlexPosition?

	public init(justifyContent: FlexPosition?, alignItems: FlexPosition?) {
		self.justifyContent = justifyContent
		self.alignItems = alignItems
	}
}

public struct ColumnStyle: Codable {
	public let container: ContainerStylingProperties?

	public init(container: ContainerStylingProperties?) {
		self.container = container
	}
}

public struct ColumnElements: Codable {
	public let own: [BasicStateStylingBlock<ColumnStyle>]

	public init(own: [BasicStateStylingBlock<ColumnStyle>]) {
		self.own = own
	}
}

public struct ColumnModel<T: Codable>: Codable {
	public let styles: LayoutStyle<ColumnElements>?
	public let children: [T]

	public init(styles: LayoutStyle<ColumnElements>?, children: [T]) {
		self.styles = styles
		self.children = children
	}
}

public enum BorderStyle: String, Codable {
	case solid = "Solid"
	case dashed = "Dashed"
}

public struct BorderStylingProperties: Codable {
	public let borderRadius: Float?
	public let borderColor: ThemeColor?
	public let borderWidth: Float?
	public let borderStyle: BorderStyle?

	public init(borderRadius: Float?, borderColor: ThemeColor?, borderWidth: Float?, borderStyle: BorderStyle?) {
		self.borderRadius = borderRadius
		self.borderColor = borderColor
		self.borderWidth = borderWidth
		self.borderStyle = borderStyle
	}
}

public struct ImageStyles: Codable {
	public let border: BorderStylingProperties?
	public let dimension: DimensionStylingProperties?
	public let flexChild: FlexChildStylingProperties?
	public let spacing: SpacingStylingProperties?

	public init(border: BorderStylingProperties?, dimension: DimensionStylingProperties?, flexChild: FlexChildStylingProperties?, spacing: SpacingStylingProperties?) {
		self.border = border
		self.dimension = dimension
		self.flexChild = flexChild
		self.spacing = spacing
	}
}

public struct ImageElements: Codable {
	public let own: [BasicStateStylingBlock<ImageStyles>]

	public init(own: [BasicStateStylingBlock<ImageStyles>]) {
		self.own = own
	}
}

public struct ImageUrl: Codable {
	public let light: String
	public let dark: String?

	public init(light: String, dark: String?) {
		self.light = light
		self.dark = dark
	}
}

public struct ImageModel: Codable {
	public let styles: LayoutStyle<ImageElements>?
	public let alt: String?
	public let url: ImageUrl

	public init(styles: LayoutStyle<ImageElements>?, alt: String?, url: ImageUrl) {
		self.styles = styles
		self.alt = alt
		self.url = url
	}
}

public struct RichTextStyle: Codable {
	public let dimension: DimensionStylingProperties?
	public let flexChild: FlexChildStylingProperties?
	public let spacing: SpacingStylingProperties?
	public let background: BackgroundStylingProperties?
	public let text: TextStylingProperties?

	public init(dimension: DimensionStylingProperties?, flexChild: FlexChildStylingProperties?, spacing: SpacingStylingProperties?, background: BackgroundStylingProperties?, text: TextStylingProperties?) {
		self.dimension = dimension
		self.flexChild = flexChild
		self.spacing = spacing
		self.background = background
		self.text = text
	}
}

public struct RichTextElements: Codable {
	public let own: [BasicStateStylingBlock<RichTextStyle>]

	public init(own: [BasicStateStylingBlock<RichTextStyle>]) {
		self.own = own
	}
}

public struct RichTextModel: Codable {
	public let styles: LayoutStyle<RichTextElements>?
	public let value: String

	public init(styles: LayoutStyle<RichTextElements>?, value: String) {
		self.styles = styles
		self.value = value
	}
}

public struct RowStyle: Codable {
	public let container: ContainerStylingProperties?

	public init(container: ContainerStylingProperties?) {
		self.container = container
	}
}

public struct RowElements: Codable {
	public let own: [BasicStateStylingBlock<RowStyle>]

	public init(own: [BasicStateStylingBlock<RowStyle>]) {
		self.own = own
	}
}

public struct RowModel<T: Codable>: Codable {
	public let styles: LayoutStyle<RowElements>?
	public let children: [T]

	public init(styles: LayoutStyle<RowElements>?, children: [T]) {
		self.styles = styles
		self.children = children
	}
}

public struct StatelessStylingBlock<T: Codable>: Codable {
	public let `default`: T

	public init(default: T) {
		self.default = `default`
	}
}

public indirect enum LayoutSchemaModel: Codable {
	case row(RowModel<LayoutSchemaModel>)
	case column(ColumnModel<LayoutSchemaModel>)
	case image(ImageModel)
	case richText(RichTextModel)
	case basicText(BasicTextModel)

	enum CodingKeys: String, CodingKey, Codable {
		case row = "Row",
			column = "Column",
			image = "Image",
			richText = "RichText",
			basicText = "BasicText"
	}

	private enum ContainerCodingKeys: String, CodingKey {
		case type, schema
	}

	public init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: ContainerCodingKeys.self)
		if let type = try? container.decode(CodingKeys.self, forKey: .type) {
			switch type {
			case .row:
				if let content = try? container.decode(RowModel<LayoutSchemaModel>.self, forKey: .schema) {
					self = .row(content)
					return
				}
			case .column:
				if let content = try? container.decode(ColumnModel<LayoutSchemaModel>.self, forKey: .schema) {
					self = .column(content)
					return
				}
			case .image:
				if let content = try? container.decode(ImageModel.self, forKey: .schema) {
					self = .image(content)
					return
				}
			case .richText:
				if let content = try? container.decode(RichTextModel.self, forKey: .schema) {
					self = .richText(content)
					return
				}
			case .basicText:
				if let content = try? container.decode(BasicTextModel.self, forKey: .schema) {
					self = .basicText(content)
					return
				}
			}
		}
		throw DecodingError.typeMismatch(LayoutSchemaModel.self, DecodingError.Context(codingPath: decoder.codingPath, debugDescription: "Wrong type for LayoutSchemaModel"))
	}

	public func encode(to encoder: Encoder) throws {
		var container = encoder.container(keyedBy: ContainerCodingKeys.self)
		switch self {
		case .row(let content):
			try container.encode(CodingKeys.row, forKey: .type)
			try container.encode(content, forKey: .schema)
		case .column(let content):
			try container.encode(CodingKeys.column, forKey: .type)
			try container.encode(content, forKey: .schema)
		case .image(let content):
			try container.encode(CodingKeys.image, forKey: .type)
			try container.encode(content, forKey: .schema)
		case .richText(let content):
			try container.encode(CodingKeys.richText, forKey: .type)
			try container.encode(content, forKey: .schema)
		case .basicText(let content):
			try container.encode(CodingKeys.basicText, forKey: .type)
			try container.encode(content, forKey: .schema)
		}
	}
}

public enum DimensionWidthFitValue: String, Codable {
	case wrapContent = "wrap-content"
	case fitWidth = "fit-width"
}

public enum DimensionHeightFitValue: String, Codable {
	case wrapContent = "wrap-content"
	case fitHeight = "fit-height"
}
